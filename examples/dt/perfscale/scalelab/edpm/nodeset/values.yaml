# yamllint disable rule:line-length
# local-config: referenced, but not emitted by kustomize
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: edpm-nodeset-values
  annotations:
    config.kubernetes.io/local-config: "true"
data:
  root_password: cmVkaGF0Cg==
  preProvisioned: true
  ssh_keys:
    # Authorized keys that will have access to the dataplane computes via SSH
    authorized: CHANGEME
    # The private key that will have access to the dataplane computes via SSH
    private: CHANGEME2
    # The public key that will have access to the dataplane computes via SSH
    public: CHANGEME3
  nodeset:
    ansible:
      ansibleUser: cloud-admin
      ansiblePort: 22
      ansibleVars:
        # CHANGEME -- see https://access.redhat.com/solutions/253273
        # edpm_bootstrap_command: |
        #       subscription-manager register --username <subscription_manager_username> \
        #         --password <subscription_manager_password>
        #       podman login -u <registry_username> -p <registry_password> registry.redhat.io
        timesync_ntp_servers:
          - hostname: pool.ntp.org
        # edpm_network_config
        # These vars are edpm_network_config role vars
        edpm_network_config_hide_sensitive_logs: false
        edpm_network_config_os_net_config_mappings:
          # Need to provide nic mapping based on system uuid or system product name
          # here used systetm uuid
          edpm-compute-0:  # CHANGEME
            nic1: 6c:fe:54:3f:8a:01  # CHANGEME
            nic2: 6c:fe:54:3f:8a:02  # CHANGEME
            nic3: 6c:fe:54:3f:8a:03  # CHANGEME
            nic4: 6c:fe:54:3f:8a:04  # CHANGEME
        edpm_network_config_template: |
          ---
          {% set mtu_list = [ctlplane_mtu] %}
          {% for network in nodeset_networks %}
          {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
          {%- endfor %}
          {% set min_viable_mtu = mtu_list | max %}
          network_config:
          - type: ovs_bridge
            name: {{ neutron_physical_bridge_name }}
            mtu: {{ min_viable_mtu }}
            use_dhcp: false
            dns_servers: {{ ctlplane_dns_nameservers }}
            domain: {{ dns_search_domains }}
            addresses:
            - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
            routes: {{ ctlplane_host_routes }}
            members:
            - type: interface
              name: nic2
              mtu: {{ min_viable_mtu }}
              # force the MAC address of the bridge to this interface
              primary: true
          {% for network in nodeset_networks if network not in ['external', 'tenant'] %}
            - type: vlan
              mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
              vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
              addresses:
              - ip_netmask: {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
              routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
          {% endfor %}
          - type: ovs_user_bridge
            name: br-link1
            use_dhcp: false
            ovs_extra: "set port br-link1 tag={{ lookup('vars', networks_lower['tenant'] ~ '_vlan_id') }}"
            addresses:
            - ip_netmask: {{ lookup('vars', networks_lower['tenant'] ~ '_ip') }}/{{ lookup('vars', networks_lower['tenant'] ~ '_cidr') }}
            mtu: {{ lookup('vars', networks_lower['tenant'] ~ '_mtu') }}
            members:
            - type: ovs_dpdk_port
              name: dpdk1
              members:
              - type: interface
                name: nic3
          - type: ovs_user_bridge
            name: br-link2
            use_dhcp: false
            mtu: 9000
            members:
            - type: ovs_dpdk_port
              name: dpdk2
              members:
              - type: interface
                name: nic4

        # These vars are for the network config templates themselves and are
        # considered EDPM network defaults.
        neutron_physical_bridge_name: br-ex
        neutron_public_interface_name: nic1
        # edpm_nodes_validation
        edpm_nodes_validation_validate_controllers_icmp: false
        edpm_nodes_validation_validate_gateway_icmp: false
        dns_search_domains: []
        gather_facts: false
        # edpm firewall, change the allowed CIDR if needed
        edpm_sshd_configure_firewall: true
        edpm_sshd_allowed_ranges:
          - 192.168.122.0/24
    networks:
      - defaultRoute: true
        name: ctlplane
        subnetName: subnet1
      - name: internalapi
        subnetName: subnet1
      - name: storage
        subnetName: subnet1
      - name: tenant
        subnetName: subnet1
    nodes:
      edpm-compute-0:
        hostName: edpm-compute-0
      edpm-compute-1:
        hostName: edpm-compute-1
    services:
      - bootstrap
      - download-cache
      - reboot-os
      - configure-network
      - validate-network
      - install-os
      - configure-os
      - ssh-known-hosts
      - run-os
      - install-certs
      - ovn
      - neutron-ovn
      - neutron-metadata
      - libvirt
      - nova-custom-ovsdpdk
      - telemetry
  nova:
    compute:
      conf: |
        # CHANGEME
        [DEFAULT]
        reserved_host_memory_mb = 4096
        [compute]
        cpu_shared_set = 0-3,24-27
        cpu_dedicated_set = 8-23,32-47
        [neutron]
        physnets = dpdk1, dpdk2
        [neutron_physnet_dpdk1]
        numa_nodes = 0
        [neutron_physnet_dpdk2]
        numa_nodes = 0
        [neutron_tunnel]
        numa_nodes = 0
    migration:
      ssh_keys:
        private: CHANGEME4
        public: CHANGEME5
